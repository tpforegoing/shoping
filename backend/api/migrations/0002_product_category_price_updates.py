# Generated by Django 5.2

from django.db import migrations, models
from django.utils import timezone
from django.db.models import Q


def update_current_prices(apps, schema_editor):
    """
    Заповнює денормалізовані поля current_price_value та current_price_id
    для всіх продуктів на основі їх актуальних цін.
    """
    Product = apps.get_model('api', 'Product')
    Price = apps.get_model('api', 'Price')
    
    now = timezone.now()
    
    # Для кожного продукту знаходимо актуальну ціну
    for product in Product.objects.all():
        current_price = Price.objects.filter(
            product=product,
            is_active=True,
            valid_from__lte=now
        ).filter(
            Q(valid_to__gte=now) | Q(valid_to__isnull=True)
        ).order_by('-valid_from').first()
        
        if current_price:
            product.current_price_value = current_price.value
            product.current_price_id = current_price.id
            product.save(update_fields=['current_price_value', 'current_price_id'])


def update_category_full_titles(apps, schema_editor):
    """
    Оновлює full_title для всіх категорій продуктів.
    Спочатку оновлює кореневі категорії, потім їх дочірні елементи.
    """
    ProductCategory = apps.get_model('api', 'ProductCategory')
    
    # Оновлюємо кореневі категорії
    root_categories = ProductCategory.objects.filter(parent__isnull=True)
    for category in root_categories:
        category.full_title = category.title
        category.save(update_fields=['full_title'])
    
    # Функція для рекурсивного оновлення дочірніх категорій
    def update_children(parent_category):
        children = ProductCategory.objects.filter(parent=parent_category)
        for child in children:
            child.full_title = f"{parent_category.full_title}. {child.title}"
            child.save(update_fields=['full_title'])
            update_children(child)
    
    # Оновлюємо всі дочірні категорії
    for root in root_categories:
        update_children(root)


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0001_initial'),
    ]

    operations = [
        # 1. Додаємо поле full_title до ProductCategory, якщо його ще немає
        migrations.AddField(
            model_name='productcategory',
            name='full_title',
            field=models.CharField(blank=True, max_length=500, null=True),
        ),
        
        # 2. Оновлюємо full_title для всіх категорій
        migrations.RunPython(
            update_category_full_titles,
            reverse_code=migrations.RunPython.noop
        ),
        
        # 3. Додаємо денормалізовані поля до Product
        migrations.AddField(
            model_name='product',
            name='current_price_value',
            field=models.DecimalField(blank=True, db_index=True, decimal_places=2, max_digits=10, null=True),
        ),
        migrations.AddField(
            model_name='product',
            name='current_price_id',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        
        # 4. Заповнюємо денормалізовані поля для продуктів
        migrations.RunPython(
            update_current_prices,
            reverse_code=migrations.RunPython.noop
        ),
        
        # 5. Видаляємо поле parent з Product
        migrations.RemoveField(
            model_name='product',
            name='parent',
        ),
        
        # 6. Додаємо індекс для Price для оптимізації запитів
        migrations.AddIndex(
            model_name='price',
            index=models.Index(fields=['product', 'is_active', 'valid_from'], name='price_validity_idx'),
        ),
    ]