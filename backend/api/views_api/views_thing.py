###################### import Django module ###########################
from django.core.exceptions import ObjectDoesNotExist                  #type: ignore

from rest_framework.permissions import IsAuthenticated, BasePermission  #type: ignore
from rest_framework.response import Response                            #type: ignore
from rest_framework.pagination import PageNumberPagination              #type: ignore
from rest_framework.viewsets import ModelViewSet                        #type: ignore
from rest_framework.filters import SearchFilter, OrderingFilter         #type: ignore
from rest_framework.exceptions import PermissionDenied                  #type: ignore
from knox.auth import TokenAuthentication                               #type: ignore

from django.conf import settings                                        #type: ignore
from api.models.roles import CLIENT, MANAGER       

class DefaultPagination(PageNumberPagination):
    page_size = getattr(settings, 'PAGE_SIZE', 50)

class GenericThingViewSet(ModelViewSet):
    """
    –¶–µ–π –∫–ª–∞—Å –ø—ñ–¥—Ç—Ä–∏–º—É—î:
    –∫–∞—Å—Ç–æ–º–Ω—ñ permission_classes –Ω–∞ —Ä—ñ–≤–Ω—ñ –¥—ñ–π (list, create, destroy —Ç–æ—â–æ),
    –¥–∏–Ω–∞–º—ñ—á–Ω—ñ —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ç–æ—Ä–∏ (serializer_map),
    –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é,
    –ø–æ—à—É–∫ —ñ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è.
    """
    # ‚úÖ –î–æ–¥–∞–π —Ü–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ, —ñ–Ω–∞–∫—à–µ –Ω–µ –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –±–µ–∑–ø–µ–∫–∞
    authentication_classes = [TokenAuthentication]      # Knox —Ç–æ–∫–µ–Ω-–∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
    permission_classes = [IsAuthenticated]
    permission_classes_map = {}
    filter_backends = [ SearchFilter, OrderingFilter]
    pagination_class = DefaultPagination  # ‚úÖ –î–æ–¥–∞–π —Ü–µ

    model = None
    serializer_class = None
    serializer_map = {}
    search_fields = []
    ordering_fields = '__all__'

    def get_permissions(self):
        """
        –î–∏–Ω–∞–º—ñ—á–Ω–æ –æ–±–∏—Ä–∞—î permission_classes –¥–ª—è –∫–æ–∂–Ω–æ—ó –¥—ñ—ó.
        """
        action = self.action
        perms = self.permission_classes_map.get(action, self.permission_classes)
        return [perm() for perm in perms]
    
    def get_queryset(self):
        return self.model.objects.all().order_by('id')

    def get_serializer_class(self):
        action = self.action
        return self.serializer_map.get(action, self.serializer_class)

    def perform_create(self, serializer):
        serializer.save(
            created_by=self.request.user,
            updated_by=self.request.user
        )

    def perform_update(self, serializer):
        serializer.save(
            updated_by=self.request.user
        )

    def list(self, request, *args, **kwargs):
        # print("üîç inside list")
        # print("üîê Authenticated user:", request.user)
        # print("üîé Query params:", request.query_params)
        # print("üìÑ Page size:", getattr(self.paginator, 'page_size', 'üö´ NO PAGINATOR'))

        queryset = self.filter_queryset(self.get_queryset())
        # print(f"üß™ FILTERED QUERYSET: {queryset}, type: {type(queryset)}")

        page = self.paginate_queryset(queryset)
        # print(f"üì¶ Paginator class: {getattr(self, 'pagination_class', None)}")
        # print(f"üì¶ Actual paginator: {getattr(self, 'paginator', None)}")
        if page is not None:
            # print(f"üìÑ Page object: {page}")

            serializer = self.get_serializer(page, many=True)
            # print(f"‚úÖ Returning paginated data: {len(serializer.data)} items")
            return self.get_paginated_response(serializer.data)

        serializer = self.get_serializer(queryset, many=True)
        # print(f"‚ö†Ô∏è No pagination applied, total items: {len(serializer.data)}")
        return Response(serializer.data)

